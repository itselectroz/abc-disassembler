export const instructions = [
    ["add", 0xA0],
    ["add_i", 0xC5],
    ["astype", 0x86, "multiname"],
    ["astypelate", 0x87],
    ["applytype", 0x53, "u30"],
    ["bitand", 0xA8],
    ["bitnot", 0x97],
    ["bitor", 0xA9],
    ["bitxor", 0xAA],
    ["call", 0x41, "u30"],
    ["callmethod", 0x43, "method", "u30"],
    ["callproperty", 0x46, "multiname", "u30"],
    ["callproplex", 0x4C, "multiname", "u30"],
    ["callpropvoid", 0x4F, "multiname", "u30"],
    ["callstatic", 0x44, "method_info", "u30"],
    ["callsuper", 0x45, "multiname", "u30"],
    ["callsupervoid", 0x4E, "mulitname", "u30"],
    ["checkfilter", 0x78],
    ["coerce", 0x80, "multiname"],
    ["coerce_a", 0x82],
    ["coerce_s", 0x85],
    ["construct", 0x42, "u30"],
    ["constructprop", 0x4A, "multiname", "u30"],
    ["constructsuper", 0x49, "u30"],
    ["convert_b", 0x76],
    ["convert_i", 0x73],
    ["convert_d", 0x75],
    ["convert_o", 0x77],
    ["convert_u", 0x74],
    ["convert_s", 0x70],
    ["debug", 0xEF, "u8", "string", "u8", "u30"],
    ["debugfile", 0xF1, "string"],
    ["debugline", 0xF0, "u30"],
    ["declocal", 0x94, "u30"],
    ["declocal_i", 0xC3, "u30"],
    ["decrement", 0x93],
    ["decrement_i", 0xC1],
    ["deleteproperty", 0x6A, "multiname"],
    ["divide", 0xA3],
    ["dup", 0x2A],
    ["dxns", 0x06, "string"],
    ["dxnslate", 0x07],
    ["equals", 0xAB],
    ["esc_xattr", 0x72],
    ["esc_xelem", 0x71],
    ["findproperty", 0x5E, "multiname"],
    ["findpropstrict", 0x5D, "multiname"],
    ["getdescendants", 0x59, "multiname"],
    ["getglobalscope", 0x64],
    ["getglobalslot", 0x6E, "u30"],
    ["getlex", 0x60, "multiname"],
    ["getlocal", 0x62, "u30"],
    ["getlocal_0", 0xD0],
    ["getlocal_1", 0xD1],
    ["getlocal_2", 0xD2],
    ["getlocal_3", 0xD3],
    ["getproperty", 0x66, "multiname"],
    ["getscopeobject", 0x65, "u30"],
    ["getslot", 0x6C, "u30"],
    ["getsuper", 0x04, "multiname"],
    ["greaterequals", 0xB0],
    ["greaterthan", 0xAF],
    ["hasnext", 0x1F],
    ["hasnext2", 0x32, "u30", "u30"],
    ["ifeq", 0x13, "offset"],
    ["iffalse", 0x12, "offset"],
    ["ifge", 0x18, "offset"],
    ["ifgt", 0x17, "offset"],
    ["ifle", 0x16, "offset"],
    ["iflt", 0x15, "offset"],
    ["ifnge", 0x0F, "offset"],
    ["ifngt", 0x0E, "offset"],
    ["ifnle", 0x0D, "offset"],
    ["ifnlt", 0x0C, "offset"],
    ["ifne", 0x14, "offset"],
    ["ifstricteq", 0x19, "offset"],
    ["ifstrictne", 0x1A, "offset"],
    ["iftrue", 0x11, "offset"],
    ["in", 0xB4],
    ["inclocal", 0x92, "u30"],
    ["inclocal_i", 0xC2, "u30"],
    ["increment", 0x91],
    ["increment_i", 0xC0],
    ["initproperty", 0x68, "multiname"],
    ["instanceof", 0xB1],
    ["istype", 0xB2, "multiname"],
    ["istypelate", 0xB3],
    ["jump",0x10,"offset"],
    ["kill",0x08,"u30"],
    ["label",0x09],
    ["lessequals",0xae],
    ["lessthan",0xad,],
    ["lookupswitch",0x1b,"offset","u30","array1-offset"],
    ["lshift",0xa5],
    ["modulo",0xa4],
    ["multiply",0xa2],
    ["multiply_i",0xc7],
    ["negate",0x90],
    ["negate_i",0xc4],
    ["newactication",0x57],
    ["newarray",0x56,"u30"],
    ["newcatch",0x5a,"exception_info"],
    ["newclass",0x58,"class_info"],
    ["newfuntion",0x40,"u30"],
    ["newobject",0x55,"u30"],
    ["nextname",0x1e],
    ["nextvalue",0x23],
    ["nop",0x02],
    ["not",0x96],
    ["pop",0x29],
    ["popscope",0x1d],
    ["pushbyte",0x24,"u8"],
    ["pushdouble",0x2f,"double"],
    ["pushfalse",0x27],
    ["pushint",0x2d,"int"],
    ["pushnamespace",0x31,"namespace"],
    ["pushnan",0x28],
    ["pushnull",0x20],
    ["pushscope",0x30],
    ["pushshort",0x25,"u30"],
    ["pushstring",0x2C,"string"],
    ["pushtrue",0x26],
    ["pushuint",0x2e,"u_int"],
    ["pushundefined",0x21],
    ["pushwith",0x1c],
    ["returnvalue",0x48],
    ["returnvoid",0x47],
    ["rshift",0xa6],
    ["setlocal",0x63,"u30"],
    ["setlocal_0", 0xD4],
    ["setlocal_1", 0xD5],
    ["setlocal_2", 0xD6],
    ["setlocal_3", 0xD7],
    ["setglobalslot", 0x6F, "u30"],
    ["setproperty", 0x61, "multiname"],
    ["setslot", 0x6D, "u30"],
    ["setsuper", 0x05, "multiname"],
    ["strictequals", 0xAC],
    ["subtract", 0xA1],
    ["subtract_i", 0xC6],
    ["swap", 0x2B],
    ["throw", 0x03],
    ["typeof", 0x95],
    ["urshift", 0xA7],
]

export const instructionMap: any = {};

for(const instruction of instructions) {
    instructionMap[instruction[1]] = instruction;
}